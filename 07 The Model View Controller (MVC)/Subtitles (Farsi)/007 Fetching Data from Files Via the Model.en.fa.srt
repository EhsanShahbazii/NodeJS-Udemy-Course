1
00:00:03,310 --> 00:00:07,760
من هنوز این خطا را دریافت می کنم که به نظر می رسد محصولات من طولانی نیستند

2
00:00:07,870 --> 00:00:12,270
حتی اگر من نسبتاً مطمئن هستم که این کد باید محصولات من را بازیابی کند

3
00:00:12,280 --> 00:00:14,190
اما مشکل آن کد چیست؟

4
00:00:15,570 --> 00:00:18,610
خوب من داده ها را به اینجا برمی گردم

5
00:00:18,930 --> 00:00:20,270
در هر دو مورد

6
00:00:20,370 --> 00:00:24,450
اما به خاطر داشته باشید که این کد ناهمزمان است.

7
00:00:24,450 --> 00:00:29,570
بنابراین متد fetch all من در اینجا این خط را اجرا می کند، این خط را اجرا می کند

8
00:00:29,610 --> 00:00:36,070
و همانطور که یاد گرفتید، به سادگی این callback را در رجیستری امیتر رویداد خود ثبت می کند تا آن را به این صورت قرار دهد

9
00:00:36,240 --> 00:00:42,640
اما پس از آن فقط با این تابع تمام می شود و خود این تابع چیزی را بر نمی گرداند.

10
00:00:42,700 --> 00:00:49,350
این عبارات بازگشتی در اینجا متعلق به این تابع درونی در اینجا هستند، نه به این تابع بیرونی،

11
00:00:49,410 --> 00:00:52,260
بنابراین واکشی همه چیز چیزی را بر نمی گرداند،

12
00:00:52,260 --> 00:00:59,640
بنابراین، اگر بخواهم به طول دسترسی داشته باشم، آن را تعریف نشده برمی گرداند و به نظر من، در فایل shop.ejs

13
00:00:59,970 --> 00:01:04,160
در محصولاتم، سعی می‌کنم به طول نامشخص دسترسی داشته باشم

14
00:01:04,260 --> 00:01:06,760
و من یک خطا دریافت می کنم.

15
00:01:06,860 --> 00:01:08,010
پس مسئله این است

16
00:01:08,090 --> 00:01:11,140
و چگونه می توانم این را برطرف کنم؟

17
00:01:11,160 --> 00:01:12,690
راه های متعددی برای رفع این مشکل وجود دارد،

18
00:01:12,690 --> 00:01:17,200
در حال حاضر من به سادگی یک استدلال را در واکشی همه می پذیرم و این یک تماس است

19
00:01:17,310 --> 00:01:22,920
و این در واقع به من اجازه می دهد تا تابعی را به fetch all منتقل کنم که fetch all اجرا خواهد شد

20
00:01:22,920 --> 00:01:29,780
پس از انجام آن، به طوری که چیزی که fetch all را فراخوانی می کند بتواند یک تابع را ارسال کند

21
00:01:29,910 --> 00:01:34,020
سپس از فراخوانی آگاه می شود که اطلاعاتی را که می خواهم برگردانم نگه می دارد.

22
00:01:34,050 --> 00:01:35,070
پیچیده به نظر می رسد؟

23
00:01:35,070 --> 00:01:36,430
اجازه دهید به شما نشان دهم که چگونه کار می کند.

24
00:01:36,480 --> 00:01:38,880
بنابراین من یک تابع در اینجا دریافت خواهم کرد،

25
00:01:38,910 --> 00:01:45,630
این آرگومان یک تابع را نگه می دارد و بنابراین به جای برگرداندن یک آرایه، در اینجا من یک callback خواهم داشت

26
00:01:45,900 --> 00:01:47,500
جایی که من یک آرایه خالی ارسال می کنم،

27
00:01:47,520 --> 00:01:51,990
بنابراین من این آرگومان را به عنوان تابعی اجرا می کنم که یک آرایه خالی را به آن ارسال می کنم

28
00:01:52,380 --> 00:01:57,030
و من همین کار را در پایین انجام خواهم داد، فقط نه با یک آرایه خالی، بلکه در اینجا یک callback خواهم داشت

29
00:01:57,030 --> 00:01:59,750
داده های json تجزیه شده من را ارسال کنید.

30
00:02:00,180 --> 00:02:08,610
بنابراین من این callback را فراخوانی می‌کنم و این به من اجازه می‌دهد تا به کنترل‌کننده‌ام بروم که در آنجا واکشی همه و آنجا را فراخوانی می‌کنم.

31
00:02:08,610 --> 00:02:18,640
من اکنون به سادگی باید در عملکردی بگذرم که بدانم در نهایت محصولاتم را دریافت خواهم کرد، مانند این

32
00:02:19,300 --> 00:02:24,230
و بنابراین من نیازی به ذخیره آن در اینجا ندارم زیرا این تابع fetch all چیزی را بر نمی گرداند.

33
00:02:24,430 --> 00:02:32,350
در عوض در اینجا من به سادگی فرآیند برگشت تماس خود را ایجاد می کنم و در آن تابعی که برای واکشی همه ارسال می کنم، رندر می کنم

34
00:02:32,530 --> 00:02:39,490
وقتی می دانم که واکشی همه محصولات انجام شده است و محصولات را اینجا دریافت می کنم زیرا دقیقاً همینطور است

35
00:02:39,490 --> 00:02:41,660
استدلالی که من به تماس برگشت دادم

36
00:02:41,680 --> 00:02:48,730
در واکشی همه، زیرا آرگومان callback در اینجا به این تابع ناشناس اشاره می کند که من به آن می پردازم

37
00:02:48,730 --> 00:02:49,750
همه را واکشی

38
00:02:50,230 --> 00:02:51,890
همین منطق است

39
00:02:52,000 --> 00:02:53,500
موارد استفاده فایل را در اینجا بخوانید،

40
00:02:53,630 --> 00:02:57,550
فقط اینکه ما فایل خواندنی را خودمان تعریف نکردیم، بلکه فایل را خواندیم

41
00:02:57,570 --> 00:02:59,100
همچنین یک تماس پاسخ می گیرد

42
00:02:59,350 --> 00:03:03,700
و در اینجا ما تابع خواندن فایل را پس از انجام آن برای ما اجرا می کنیم.

43
00:03:03,730 --> 00:03:04,640
ما هم همین کار را می کنیم

44
00:03:04,690 --> 00:03:06,070
فقط هر دو طرف را بنویسیم

45
00:03:06,070 --> 00:03:09,980
اکنون. واکشی همه را داریم و fetch all تابعی را می گیرد

46
00:03:10,000 --> 00:03:14,000
پس از اتمام باید اجرا شود و پس از اتمام، محصولات را دریافت می کنیم

47
00:03:14,020 --> 00:03:16,570
به لطف اجرای خودمان از fetch all

48
00:03:16,670 --> 00:03:19,920
و سپس پاسخ خود را با آن محصولات ارائه می دهیم.

49
00:03:20,290 --> 00:03:26,080
و با این کار، اگر آن را ذخیره کنیم و اکنون این صفحه را دوباره بارگذاری کنیم، محصولات را در اینجا می بینیم و البته این کار را انجام می دهیم

50
00:03:26,080 --> 00:03:31,180
همه محصولاتی را که در گذشته داشتیم و همچنین محصولات جدیدی را که اضافه می کنیم مشاهده کنید

51
00:03:31,390 --> 00:03:33,450
و یک صفحه سبک کوچک وجود دارد که من می بینم.

52
00:03:33,550 --> 00:03:35,020
اما این روش کار می کند

53
00:03:35,080 --> 00:03:41,830
و اکنون هنوز یک پایگاه داده نیست، اما در ذخیره سازی آرایه بهتر از این است و از قبل به ما نشان می دهد که چرا ما را

54
00:03:41,830 --> 00:03:43,590
ممکن است بخواهید از چنین مدلی استفاده کنید.

55
00:03:43,600 --> 00:03:50,500
این کد فوق پیچیده نیست اما به وضوح کدی است که به این داده ها، به این مدل و بنابراین تعلق دارد

56
00:03:50,590 --> 00:03:53,480
آن را به فایل جداگانه خود برون سپاری می کند.